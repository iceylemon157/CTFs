//
// Created by ron on 2020-08-24.
//

#include <cstring>
#include "Utils.h"

void GetMsg(const unsigned char xormask[256], const unsigned char msg[], const unsigned int msize, char buffer[256]);

unsigned char xormask[64] = {
        0x9a, 0x46, 0x80, 0x11, 0x7e, 0xb1, 0x7a, 0x4b, 0x01, 0xbe
        , 0xf3, 0xac, 0xb0, 0x1b, 0x14, 0xea, 0x27, 0xad, 0x3f, 0x9c
        , 0xf3, 0x48, 0xf2, 0x5b, 0xfc, 0x7e, 0x63, 0x42, 0xa8, 0x8e
        , 0x01, 0xe7, 0x25, 0xa5, 0x27, 0x5a, 0x3f, 0xc0, 0x19, 0x12
        , 0xda, 0xc6, 0xf1, 0x03, 0x7c, 0x2a, 0xa9, 0x99, 0x2d, 0x41
        , 0xbd, 0x9d, 0x01, 0xa7, 0xef, 0xc4, 0x0a, 0x6b, 0xdb, 0x57
        , 0xbb, 0xf4, 0xe7, 0x4a};

// Welcome to CTFlearn Riyadh Reversing Challenge!
unsigned char wmsg[48] = {
        0xcd, 0x23, 0xec, 0x72, 0x11, 0xdc, 0x1f, 0x6b, 0x75, 0xd1
        , 0xd3, 0xef, 0xe4, 0x5d, 0x78, 0x8f, 0x46, 0xdf, 0x51, 0xbc
        , 0xa1, 0x21, 0x8b, 0x3a, 0x98, 0x16, 0x43, 0x10, 0xcd, 0xf8
        , 0x64, 0x95, 0x56, 0xcc, 0x49, 0x3d, 0x1f, 0x83, 0x71, 0x73
        , 0xb6, 0xaa, 0x94, 0x6d, 0x1b, 0x4f, 0x88, 0x99};

// Usage: Riyadh flag
unsigned char umsg[19] = {
        0xcf, 0x35, 0xe1, 0x76, 0x1b, 0x8b, 0x5a, 0x19, 0x68, 0xc7
        , 0x92, 0xc8, 0xd8, 0x3b, 0x72, 0x86, 0x46, 0xca, 0x3f};


// CTFlearn{Reversing_Is_Easy}
unsigned char ffmsg[28] = {
        0xd9, 0x12, 0xc6, 0x7d, 0x1b, 0xd0, 0x08, 0x25, 0x7a, 0xec
        , 0x96, 0xda, 0xd5, 0x69, 0x67, 0x83, 0x49, 0xca, 0x60, 0xd5
        , 0x80, 0x17, 0xb7, 0x3a, 0x8f, 0x07, 0x1e, 0x42};

// You found the false flag!  It's not that easy dude!
unsigned char fffmsg[52] = {
        0xc3, 0x29, 0xf5, 0x31, 0x18, 0xde, 0x0f, 0x25, 0x65, 0x9e
        , 0x87, 0xc4, 0xd5, 0x3b, 0x72, 0x8b, 0x4b, 0xde, 0x5a, 0xbc
        , 0x95, 0x24, 0x93, 0x3c, 0xdd, 0x5e, 0x43, 0x0b, 0xdc, 0xa9
        , 0x72, 0xc7, 0x4b, 0xca, 0x53, 0x7a, 0x4b, 0xa8, 0x78, 0x66
        , 0xfa, 0xa3, 0x90, 0x70, 0x05, 0x0a, 0xcd, 0xec, 0x49, 0x24
        , 0x9c, 0x9d};

// CTFlearn{Masmak_Fortress_1865}
unsigned char fmsg[31] = {
        0xd9, 0x12, 0xc6, 0x7d, 0x1b, 0xd0, 0x08, 0x25, 0x7a, 0xf3
        , 0x92, 0xdf, 0xdd, 0x7a, 0x7f, 0xb5, 0x61, 0xc2, 0x4d, 0xe8
        , 0x81, 0x2d, 0x81, 0x28, 0xa3, 0x4f, 0x5b, 0x74, 0x9d, 0xf3
        , 0x01};

// You entered the wrong flag :-(
unsigned char bfmsg[31] = {
        0xc3, 0x29, 0xf5, 0x31, 0x1b, 0xdf, 0x0e, 0x2e, 0x73, 0xdb
        , 0x97, 0x8c, 0xc4, 0x73, 0x71, 0xca, 0x50, 0xdf, 0x50, 0xf2
        , 0x94, 0x68, 0x94, 0x37, 0x9d, 0x19, 0x43, 0x78, 0x85, 0xa6
        , 0x01};

// CONGRATULATIONS!! You found the flag:
unsigned char conmsg[39] = {
        0xd9, 0x09, 0xce, 0x56, 0x2c, 0xf0, 0x2e, 0x1e, 0x4d, 0xff
        , 0xa7, 0xe5, 0xff, 0x55, 0x47, 0xcb, 0x06, 0x8d, 0x66, 0xf3
        , 0x86, 0x68, 0x94, 0x34, 0x89, 0x10, 0x07, 0x62, 0xdc, 0xe6
        , 0x64, 0xc7, 0x43, 0xc9, 0x46, 0x3d, 0x05, 0xe0, 0x19};


void GetMsg(const unsigned char xormask[256], const unsigned char msg[], const unsigned int msize, char buffer[256])
{
    memset(buffer, 0, 256);
    for( int i=0; i<msize; ++i)
    {
        buffer[i] = msg[i] ^ xormask[i];
    }
}

void Msg1(char buffer[256])
{
    GetMsg(xormask, wmsg, sizeof(wmsg), buffer);
}

void Msg2(char buffer[256])
{
    GetMsg(xormask, umsg, sizeof(umsg), buffer);
}

void Msg3(char buffer[256])
{
    GetMsg(xormask, ffmsg, sizeof(ffmsg), buffer);
}

void Msg4(char buffer[256])
{
    GetMsg(xormask, fffmsg, sizeof(fffmsg), buffer);
}

void Msg5(char buffer[256])
{
    GetMsg(xormask, fmsg, sizeof(fmsg), buffer);
}

void Msg6(char buffer[256])
{
    GetMsg(xormask, bfmsg, sizeof(bfmsg), buffer);
}

void Msg7(char buffer[256])
{
    GetMsg(xormask, conmsg, sizeof(conmsg), buffer);
}


// Check that the user flag is correct
bool EnthalpyBasis(const char* userflag)
{
    size_t nx = strlen(userflag);
    if (nx != 30)
        return false;

    // Check the user flag by xor'ing with the mask and comparing
    // to the xor encrypted flag in fmsg
    int count = 0;
    unsigned char uc = 0;
    unsigned char xx = 0;
    for(int i=0; i<30; ++i)
    {
        uc = (unsigned char)userflag[i];
        xx = uc ^ xormask[i];
        if (xx != fmsg[i])
            ++count;
    }

    return count == 0;  // return true if all the characters match
}

void CTFLearnHiddenFlag()
{
}
